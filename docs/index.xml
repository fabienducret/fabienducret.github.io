<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clean blog</title>
    <link>https://fabienducret.github.io/</link>
    <description>Recent content on Clean blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Jan 2023 14:23:14 +0100</lastBuildDate><atom:link href="https://fabienducret.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>L&#39;inversion de dépendance</title>
      <link>https://fabienducret.github.io/posts/dependency-inversion/</link>
      <pubDate>Sun, 22 Jan 2023 14:23:14 +0100</pubDate>
      
      <guid>https://fabienducret.github.io/posts/dependency-inversion/</guid>
      <description>L&amp;rsquo;inversion des dépendances est un des principes clé de programmation. C&amp;rsquo;est le fameux D de l&amp;rsquo;acronyme SOLID.
Mais en quoi consiste ce principe et pourquoi est-il si utile ?
Le couplage, fléau de la maintenabilité et de la testabilité Lorsque plusieurs modules sont fortement couplés, la maintenabilité ainsi que la testabilité deviennent plus difficiles.
Prenons un exemple concret avec la récupération d&amp;rsquo;élements depuis une base de données :
import { MySQLConnection } from &amp;#39;.</description>
    </item>
    
    <item>
      <title>Le pattern Decorator pour gérer la complexité accidentelle</title>
      <link>https://fabienducret.github.io/posts/pattern-decorator/</link>
      <pubDate>Sat, 21 Jan 2023 17:49:53 +0100</pubDate>
      
      <guid>https://fabienducret.github.io/posts/pattern-decorator/</guid>
      <description>Il arrive parfois que certaines contraintes techniques polluent notre code. On appelle ça la complexité accidentelle.
Voici un exemple avec la gestion de la concurrence en Go .
Ici on définit une structure Book avec deux méthodes, une pour lire la propriété name et la deuxième pour l&amp;rsquo;écrire :
type Book struct { name string } func (b *Book) Name() string { return b.name } func (b *Book) ChangeName(n string) { b.</description>
    </item>
    
    <item>
      <title>Mon voyage littéraire</title>
      <link>https://fabienducret.github.io/posts/a-book-journey/</link>
      <pubDate>Sun, 23 Oct 2022 11:13:34 +0200</pubDate>
      
      <guid>https://fabienducret.github.io/posts/a-book-journey/</guid>
      <description>Quand on est passionné par un sujet, on a toujours envie d&amp;rsquo;apprendre.
Bien que les livres soient une source de connaissance impressionnante, certains peuvent devenir rapidement obsolètes (framework ou techno dépassé par exemple). D&amp;rsquo;autres peuvent être difficiles à lire ou comprendre.
Comment s&amp;rsquo;y retrouver au milieu de cet océan ?
Voici l&amp;rsquo;histoire de mon voyage littéraire.
Avant de commencer ce voyage, présentons les différents types de livres :
les livres techniques les livres conceptuels les livres comportementaux Les livres techniques Comme leur nom l&amp;rsquo;indique, ces livres parlent de technique.</description>
    </item>
    
  </channel>
</rss>
